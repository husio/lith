package main

import (
	"bytes"
	"context"
	"flag"
	"fmt"
	"io"
	"math/rand"
	"os"
	"time"

	"github.com/BurntSushi/toml"
	"github.com/husio/lith/app/lith"
)

func cmdPrintConfig(ctx context.Context, conf lith.Configuration, args []string) error {
	fl := flag.NewFlagSet("print-config", flag.ContinueOnError)
	if err := fl.Parse(args); err != nil {
		return fmt.Errorf("flag parse: %w", err)
	}

	var b bytes.Buffer

	// For convenience, if Secret is not provided, generate a secure value.
	// This is a case when the user is be generating the default
	// configuration.
	if conf.Secret == "" {
		conf.Secret = generateSecret()
	}

	io.WriteString(&b, `# Generated by lith print-config
#
# See https://godocs.io/github.com/husio/lith/pkg/lith#Configuration
# for a detailed configuration description.

`)

	if err := toml.NewEncoder(&b).Encode(conf); err != nil {
		fmt.Fprintf(os.Stderr, "Encode TOML configuration failed: %s\n", err)
		os.Exit(2)
	}
	_, _ = b.WriteTo(os.Stdout)

	return nil
}

func generateSecret() string {
	const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+{}\\;',./<>?{}|-=`~"

	res := make([]byte, 96)
	rnd := rand.New(rand.NewSource(time.Now().UnixNano()))
	for i := range res {
		res[i] = charset[rnd.Intn(len(charset))]
	}
	return string(res)
}
